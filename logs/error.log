{
  service: 'communication-api',
  errno: -2,
  code: 'ENOENT',
  syscall: 'scandir',
  path: '/usr/src/app/seeds',
  level: 'error',
  message: "Database initialization failed: ENOENT: no such file or directory, scandir '/usr/src/app/seeds'",
  stack: "Error: ENOENT: no such file or directory, scandir '/usr/src/app/seeds'",
  timestamp: '2025-08-09T21:40:08.388Z'
}
{
  service: 'communication-api',
  message: 'Error occurred: Email already registered',
  stack: 'Error: Email already registered\n' +
    '    at AuthService.signup (/usr/src/app/src/services/authService.ts:22:15)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at AuthController.signup (/usr/src/app/src/controllers/authController.ts:19:20)',
  statusCode: 409,
  url: '/api/auth/signup',
  method: 'POST',
  ip: '172.21.0.1',
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
  body: {
    name: 'John Doe',
    email: 'john.doe@example.com',
    phone: '+1234567890',
    password: 'MySecure123!'
  },
  query: {},
  params: {},
  level: 'error',
  timestamp: '2025-08-10T10:12:11.525Z'
}
{
  service: 'communication-api',
  message: 'Error occurred: Phone number already in use',
  stack: 'Error: Phone number already in use\n' +
    '    at UserService.updateUser (/usr/src/app/src/services/userService.ts:48:17)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at ProfileController.updateProfile (/usr/src/app/src/controllers/profileController.ts:35:25)',
  statusCode: 409,
  url: '/api/profile',
  method: 'PUT',
  ip: '172.21.0.1',
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
  body: {
    name: 'John Doe',
    phone: '+1234567890',
    avatar: 'https://example.com/avatar.jpg'
  },
  query: {},
  params: {},
  level: 'error',
  timestamp: '2025-08-10T10:15:09.198Z'
}
{
  service: 'communication-api',
  message: 'Error occurred: "fileUrl" is not allowed',
  stack: 'Error: "fileUrl" is not allowed\n' +
    '    at /usr/src/app/src/middleware/validationMiddleware.ts:16:13\n' +
    '    at Layer.handle [as handle_request] (/usr/src/app/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at next (/usr/src/app/node_modules/express/lib/router/route.js:149:13)\n' +
    '    at authenticateToken (/usr/src/app/src/middleware/authMiddleware.ts:30:5)\n' +
    '    at Layer.handle [as handle_request] (/usr/src/app/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at next (/usr/src/app/node_modules/express/lib/router/route.js:149:13)\n' +
    '    at Route.dispatch (/usr/src/app/node_modules/express/lib/router/route.js:119:3)\n' +
    '    at Layer.handle [as handle_request] (/usr/src/app/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at /usr/src/app/node_modules/express/lib/router/index.js:284:15\n' +
    '    at Function.process_params (/usr/src/app/node_modules/express/lib/router/index.js:346:12)',
  statusCode: 400,
  url: '/api/messages/send',
  method: 'POST',
  ip: '172.21.0.1',
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
  body: {
    recipientId: 'ae3dc41b-5c23-43fa-b017-2569c429bc99',
    content: 'Hello, how are you?',
    messageType: 'text',
    fileUrl: 'string'
  },
  query: {},
  params: {},
  level: 'error',
  timestamp: '2025-08-10T10:18:42.753Z'
}
{
  service: 'communication-api',
  message: 'Error occurred: "fileUrl" is not allowed',
  stack: 'Error: "fileUrl" is not allowed\n' +
    '    at /usr/src/app/src/middleware/validationMiddleware.ts:16:13\n' +
    '    at Layer.handle [as handle_request] (/usr/src/app/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at next (/usr/src/app/node_modules/express/lib/router/route.js:149:13)\n' +
    '    at authenticateToken (/usr/src/app/src/middleware/authMiddleware.ts:30:5)\n' +
    '    at Layer.handle [as handle_request] (/usr/src/app/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at next (/usr/src/app/node_modules/express/lib/router/route.js:149:13)\n' +
    '    at Route.dispatch (/usr/src/app/node_modules/express/lib/router/route.js:119:3)\n' +
    '    at Layer.handle [as handle_request] (/usr/src/app/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at /usr/src/app/node_modules/express/lib/router/index.js:284:15\n' +
    '    at Function.process_params (/usr/src/app/node_modules/express/lib/router/index.js:346:12)',
  statusCode: 400,
  url: '/api/messages/send',
  method: 'POST',
  ip: '172.21.0.1',
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
  body: {
    recipientId: 'ae3dc41b-5c23-43fa-b017-2569c429bc99',
    content: 'Hello, how are you?',
    messageType: 'text',
    fileUrl: 'https://example.com/avatar.jpg'
  },
  query: {},
  params: {},
  level: 'error',
  timestamp: '2025-08-10T10:21:13.711Z'
}
{
  service: 'communication-api',
  message: 'Error occurred: \n' +
    '      WITH latest_messages AS (\n' +
    '        SELECT DISTINCT ON (\n' +
    '          CASE \n' +
    '            WHEN sender_id = $1 THEN recipient_id \n' +
    '            ELSE sender_id \n' +
    '          END\n' +
    '        )\n' +
    '        id,\n' +
    '        sender_id,\n' +
    '        recipient_id,\n' +
    '        content,\n' +
    '        message_type,\n' +
    '        is_read,\n' +
    '        created_at,\n' +
    '        CASE \n' +
    '          WHEN sender_id = $2 THEN recipient_id \n' +
    '          ELSE sender_id \n' +
    '        END as other_user_id\n' +
    '        FROM messages \n' +
    '        WHERE (sender_id = $3 OR recipient_id = $4) \n' +
    '        AND is_deleted = false\n' +
    '        ORDER BY other_user_id, created_at DESC\n' +
    '      )\n' +
    '      SELECT \n' +
    '        lm.*,\n' +
    '        u.name as other_user_name,\n' +
    '        u.avatar as other_user_avatar,\n' +
    '        (\n' +
    '          SELECT COUNT(*) \n' +
    '          FROM messages m2 \n' +
    '          WHERE m2.recipient_id = $5 \n' +
    '          AND m2.sender_id = lm.other_user_id \n' +
    '          AND m2.is_read = false \n' +
    '          AND m2.is_deleted = false\n' +
    '        ) as unread_count\n' +
    '      FROM latest_messages lm\n' +
    '      JOIN users u ON u.id = lm.other_user_id\n' +
    '      WHERE u.is_active = true\n' +
    '      ORDER BY lm.created_at DESC\n' +
    '      LIMIT $6 OFFSET $7\n' +
    '     - SELECT DISTINCT ON expressions must match initial ORDER BY expressions',
  stack: 'error: \n' +
    '      WITH latest_messages AS (\n' +
    '        SELECT DISTINCT ON (\n' +
    '          CASE \n' +
    '            WHEN sender_id = $1 THEN recipient_id \n' +
    '            ELSE sender_id \n' +
    '          END\n' +
    '        )\n' +
    '        id,\n' +
    '        sender_id,\n' +
    '        recipient_id,\n' +
    '        content,\n' +
    '        message_type,\n' +
    '        is_read,\n' +
    '        created_at,\n' +
    '        CASE \n' +
    '          WHEN sender_id = $2 THEN recipient_id \n' +
    '          ELSE sender_id \n' +
    '        END as other_user_id\n' +
    '        FROM messages \n' +
    '        WHERE (sender_id = $3 OR recipient_id = $4) \n' +
    '        AND is_deleted = false\n' +
    '        ORDER BY other_user_id, created_at DESC\n' +
    '      )\n' +
    '      SELECT \n' +
    '        lm.*,\n' +
    '        u.name as other_user_name,\n' +
    '        u.avatar as other_user_avatar,\n' +
    '        (\n' +
    '          SELECT COUNT(*) \n' +
    '          FROM messages m2 \n' +
    '          WHERE m2.recipient_id = $5 \n' +
    '          AND m2.sender_id = lm.other_user_id \n' +
    '          AND m2.is_read = false \n' +
    '          AND m2.is_deleted = false\n' +
    '        ) as unread_count\n' +
    '      FROM latest_messages lm\n' +
    '      JOIN users u ON u.id = lm.other_user_id\n' +
    '      WHERE u.is_active = true\n' +
    '      ORDER BY lm.created_at DESC\n' +
    '      LIMIT $6 OFFSET $7\n' +
    '     - SELECT DISTINCT ON expressions must match initial ORDER BY expressions\n' +
    '    at Parser.parseErrorMessage (/usr/src/app/node_modules/pg-protocol/src/parser.ts:369:69)\n' +
    '    at Parser.handlePacket (/usr/src/app/node_modules/pg-protocol/src/parser.ts:187:21)\n' +
    '    at Parser.parse (/usr/src/app/node_modules/pg-protocol/src/parser.ts:102:30)\n' +
    '    at Socket.<anonymous> (/usr/src/app/node_modules/pg-protocol/src/index.ts:7:48)\n' +
    '    at Socket.emit (node:events:517:28)\n' +
    '    at addChunk (node:internal/streams/readable:368:12)\n' +
    '    at readableAddChunk (node:internal/streams/readable:341:9)\n' +
    '    at Socket.Readable.push (node:internal/streams/readable:278:10)\n' +
    '    at TCP.onStreamRead (node:internal/stream_base_commons:190:23)',
  statusCode: 500,
  url: '/api/messages/conversations?page=1&limit=20',
  method: 'GET',
  ip: '172.21.0.1',
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
  body: {},
  query: { page: 1, limit: 20 },
  params: {},
  level: 'error',
  timestamp: '2025-08-10T10:26:58.824Z'
}
{
  service: 'communication-api',
  message: 'Error occurred: \n' +
    '        SELECT COUNT(DISTINCT \n' +
    '          CASE \n' +
    '            WHEN sender_id = $1 THEN recipient_id \n' +
    '            ELSE sender_id \n' +
    '          END\n' +
    '        ) as count\n' +
    '        FROM messages m\n' +
    '        JOIN users u ON (\n' +
    '          (m.sender_id = $2 AND u.id = m.recipient_id) OR\n' +
    '          (m.recipient_id = $3 AND u.id = m.sender_id)\n' +
    '        )\n' +
    '        WHERE (sender_id = $4 OR recipient_id = $5) \n' +
    '        AND is_deleted = false\n' +
    '        AND u.is_active = true\n' +
    "        AND created_at >= NOW() - INTERVAL '30 days'\n" +
    '       - column reference "created_at" is ambiguous',
  stack: 'error: \n' +
    '        SELECT COUNT(DISTINCT \n' +
    '          CASE \n' +
    '            WHEN sender_id = $1 THEN recipient_id \n' +
    '            ELSE sender_id \n' +
    '          END\n' +
    '        ) as count\n' +
    '        FROM messages m\n' +
    '        JOIN users u ON (\n' +
    '          (m.sender_id = $2 AND u.id = m.recipient_id) OR\n' +
    '          (m.recipient_id = $3 AND u.id = m.sender_id)\n' +
    '        )\n' +
    '        WHERE (sender_id = $4 OR recipient_id = $5) \n' +
    '        AND is_deleted = false\n' +
    '        AND u.is_active = true\n' +
    "        AND created_at >= NOW() - INTERVAL '30 days'\n" +
    '       - column reference "created_at" is ambiguous\n' +
    '    at Parser.parseErrorMessage (/usr/src/app/node_modules/pg-protocol/src/parser.ts:369:69)\n' +
    '    at Parser.handlePacket (/usr/src/app/node_modules/pg-protocol/src/parser.ts:187:21)\n' +
    '    at Parser.parse (/usr/src/app/node_modules/pg-protocol/src/parser.ts:102:30)\n' +
    '    at Socket.<anonymous> (/usr/src/app/node_modules/pg-protocol/src/index.ts:7:48)\n' +
    '    at Socket.emit (node:events:517:28)\n' +
    '    at addChunk (node:internal/streams/readable:368:12)\n' +
    '    at readableAddChunk (node:internal/streams/readable:341:9)\n' +
    '    at Socket.Readable.push (node:internal/streams/readable:278:10)\n' +
    '    at TCP.onStreamRead (node:internal/stream_base_commons:190:23)',
  statusCode: 500,
  url: '/api/messages/stats',
  method: 'GET',
  ip: '172.21.0.1',
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
  body: {},
  query: {},
  params: {},
  level: 'error',
  timestamp: '2025-08-10T10:41:11.679Z'
}
{
  service: 'communication-api',
  message: `Error occurred: update "calls" set "metadata" = jsonb_set(metadata, '{offer}', $1, true), "updated_at" = $2 where "id" = $3 - function jsonb_set(json, unknown, unknown, boolean) does not exist`,
  stack: `error: update "calls" set "metadata" = jsonb_set(metadata, '{offer}', $1, true), "updated_at" = $2 where "id" = $3 - function jsonb_set(json, unknown, unknown, boolean) does not exist\n` +
    '    at Parser.parseErrorMessage (/usr/src/app/node_modules/pg-protocol/src/parser.ts:369:69)\n' +
    '    at Parser.handlePacket (/usr/src/app/node_modules/pg-protocol/src/parser.ts:187:21)\n' +
    '    at Parser.parse (/usr/src/app/node_modules/pg-protocol/src/parser.ts:102:30)\n' +
    '    at Socket.<anonymous> (/usr/src/app/node_modules/pg-protocol/src/index.ts:7:48)\n' +
    '    at Socket.emit (node:events:517:28)\n' +
    '    at addChunk (node:internal/streams/readable:368:12)\n' +
    '    at readableAddChunk (node:internal/streams/readable:341:9)\n' +
    '    at Socket.Readable.push (node:internal/streams/readable:278:10)\n' +
    '    at TCP.onStreamRead (node:internal/stream_base_commons:190:23)',
  statusCode: 500,
  url: '/api/calls/eb6c87b9-4eda-4f52-a384-f578096316e9/offer',
  method: 'POST',
  ip: '172.21.0.1',
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
  body: {
    offer: {
      type: 'offer',
      sdp: 'v=0\r\no=- 123456789 123456789 IN IP4 0.0.0.0\r\n...'
    },
    targetUserId: '550e8400-e29b-41d4-a716-446655440000'
  },
  query: {},
  params: {},
  level: 'error',
  timestamp: '2025-08-10T10:48:06.340Z'
}
{
  service: 'communication-api',
  message: `Error occurred: update "calls" set "metadata" = jsonb_set(metadata, '{offer}', $1, true), "updated_at" = $2 where "id" = $3 - function jsonb_set(json, unknown, unknown, boolean) does not exist`,
  stack: `error: update "calls" set "metadata" = jsonb_set(metadata, '{offer}', $1, true), "updated_at" = $2 where "id" = $3 - function jsonb_set(json, unknown, unknown, boolean) does not exist\n` +
    '    at Parser.parseErrorMessage (/usr/src/app/node_modules/pg-protocol/src/parser.ts:369:69)\n' +
    '    at Parser.handlePacket (/usr/src/app/node_modules/pg-protocol/src/parser.ts:187:21)\n' +
    '    at Parser.parse (/usr/src/app/node_modules/pg-protocol/src/parser.ts:102:30)\n' +
    '    at Socket.<anonymous> (/usr/src/app/node_modules/pg-protocol/src/index.ts:7:48)\n' +
    '    at Socket.emit (node:events:517:28)\n' +
    '    at addChunk (node:internal/streams/readable:368:12)\n' +
    '    at readableAddChunk (node:internal/streams/readable:341:9)\n' +
    '    at Socket.Readable.push (node:internal/streams/readable:278:10)\n' +
    '    at TCP.onStreamRead (node:internal/stream_base_commons:190:23)',
  statusCode: 500,
  url: '/api/calls/eb6c87b9-4eda-4f52-a384-f578096316e9/offer',
  method: 'POST',
  ip: '172.21.0.1',
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
  body: {
    offer: {
      type: 'offer',
      sdp: 'v=0\r\no=- 123456789 123456789 IN IP4 0.0.0.0\r\n...'
    },
    targetUserId: 'ae3dc41b-5c23-43fa-b017-2569c429bc99'
  },
  query: {},
  params: {},
  level: 'error',
  timestamp: '2025-08-10T10:48:44.483Z'
}
{
  service: 'communication-api',
  message: `Error occurred: update "calls" set "metadata" = jsonb_set(metadata, '{offer}', $1, true), "updated_at" = $2 where "id" = $3 - function jsonb_set(json, unknown, unknown, boolean) does not exist`,
  stack: `error: update "calls" set "metadata" = jsonb_set(metadata, '{offer}', $1, true), "updated_at" = $2 where "id" = $3 - function jsonb_set(json, unknown, unknown, boolean) does not exist\n` +
    '    at Parser.parseErrorMessage (/usr/src/app/node_modules/pg-protocol/src/parser.ts:369:69)\n' +
    '    at Parser.handlePacket (/usr/src/app/node_modules/pg-protocol/src/parser.ts:187:21)\n' +
    '    at Parser.parse (/usr/src/app/node_modules/pg-protocol/src/parser.ts:102:30)\n' +
    '    at Socket.<anonymous> (/usr/src/app/node_modules/pg-protocol/src/index.ts:7:48)\n' +
    '    at Socket.emit (node:events:517:28)\n' +
    '    at addChunk (node:internal/streams/readable:368:12)\n' +
    '    at readableAddChunk (node:internal/streams/readable:341:9)\n' +
    '    at Socket.Readable.push (node:internal/streams/readable:278:10)\n' +
    '    at TCP.onStreamRead (node:internal/stream_base_commons:190:23)',
  statusCode: 500,
  url: '/api/calls/eb6c87b9-4eda-4f52-a384-f578096316e9/offer',
  method: 'POST',
  ip: '172.21.0.1',
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
  body: {
    offer: {
      type: 'offer',
      sdp: 'v=0\r\no=- 123456789 123456789 IN IP4 0.0.0.0\r\n...'
    },
    targetUserId: 'ae3dc41b-5c23-43fa-b017-2569c429bc99'
  },
  query: {},
  params: {},
  level: 'error',
  timestamp: '2025-08-10T10:50:19.201Z'
}
{
  service: 'communication-api',
  message: `Error occurred: update "calls" set "metadata" = jsonb_set(metadata, '{ice_candidates}', COALESCE(metadata->'{ice_candidates}', '[]') || $1, true), "updated_at" = $2 where "id" = $3 - function jsonb_set(json, unknown, text, boolean) does not exist`,
  stack: `error: update "calls" set "metadata" = jsonb_set(metadata, '{ice_candidates}', COALESCE(metadata->'{ice_candidates}', '[]') || $1, true), "updated_at" = $2 where "id" = $3 - function jsonb_set(json, unknown, text, boolean) does not exist\n` +
    '    at Parser.parseErrorMessage (/usr/src/app/node_modules/pg-protocol/src/parser.ts:369:69)\n' +
    '    at Parser.handlePacket (/usr/src/app/node_modules/pg-protocol/src/parser.ts:187:21)\n' +
    '    at Parser.parse (/usr/src/app/node_modules/pg-protocol/src/parser.ts:102:30)\n' +
    '    at Socket.<anonymous> (/usr/src/app/node_modules/pg-protocol/src/index.ts:7:48)\n' +
    '    at Socket.emit (node:events:517:28)\n' +
    '    at addChunk (node:internal/streams/readable:368:12)\n' +
    '    at readableAddChunk (node:internal/streams/readable:341:9)\n' +
    '    at Socket.Readable.push (node:internal/streams/readable:278:10)\n' +
    '    at TCP.onStreamRead (node:internal/stream_base_commons:190:23)',
  statusCode: 500,
  url: '/api/calls/eb6c87b9-4eda-4f52-a384-f578096316e9/ice-candidate',
  method: 'POST',
  ip: '172.21.0.1',
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
  body: {
    candidate: {
      candidate: 'candidate:1 1 UDP 2130706431 192.168.1.100 54400 typ host',
      sdpMLineIndex: 0,
      sdpMid: 'video'
    },
    targetUserId: 'ae3dc41b-5c23-43fa-b017-2569c429bc99'
  },
  query: {},
  params: {},
  level: 'error',
  timestamp: '2025-08-10T10:53:34.292Z'
}
{
  service: 'communication-api',
  message: `Error occurred: update "calls" set "metadata" = jsonb_set(metadata, '{ice_candidates}', COALESCE(metadata->'{ice_candidates}', '[]') || $1, true), "updated_at" = $2 where "id" = $3 - function jsonb_set(json, unknown, text, boolean) does not exist`,
  stack: `error: update "calls" set "metadata" = jsonb_set(metadata, '{ice_candidates}', COALESCE(metadata->'{ice_candidates}', '[]') || $1, true), "updated_at" = $2 where "id" = $3 - function jsonb_set(json, unknown, text, boolean) does not exist\n` +
    '    at Parser.parseErrorMessage (/usr/src/app/node_modules/pg-protocol/src/parser.ts:369:69)\n' +
    '    at Parser.handlePacket (/usr/src/app/node_modules/pg-protocol/src/parser.ts:187:21)\n' +
    '    at Parser.parse (/usr/src/app/node_modules/pg-protocol/src/parser.ts:102:30)\n' +
    '    at Socket.<anonymous> (/usr/src/app/node_modules/pg-protocol/src/index.ts:7:48)\n' +
    '    at Socket.emit (node:events:517:28)\n' +
    '    at addChunk (node:internal/streams/readable:368:12)\n' +
    '    at readableAddChunk (node:internal/streams/readable:341:9)\n' +
    '    at Socket.Readable.push (node:internal/streams/readable:278:10)\n' +
    '    at TCP.onStreamRead (node:internal/stream_base_commons:190:23)',
  statusCode: 500,
  url: '/api/calls/eb6c87b9-4eda-4f52-a384-f578096316e9/ice-candidate',
  method: 'POST',
  ip: '172.21.0.1',
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
  body: {
    candidate: {
      candidate: 'candidate:1 1 UDP 2130706431 192.168.1.100 54400 typ host',
      sdpMLineIndex: 0,
      sdpMid: 'video'
    },
    targetUserId: 'ae3dc41b-5c23-43fa-b017-2569c429bc99'
  },
  query: {},
  params: {},
  level: 'error',
  timestamp: '2025-08-10T10:54:33.387Z'
}
{
  service: 'communication-api',
  message: 'Error occurred: Wallet already exists for this user',
  stack: 'Error: Wallet already exists for this user\n' +
    '    at WalletService.createWallet (/usr/src/app/src/services/walletService.ts:21:13)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at WalletController.createWallet (/usr/src/app/src/controllers/walletController.ts:18:20)',
  statusCode: 409,
  url: '/api/wallet',
  method: 'POST',
  ip: '172.21.0.1',
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
  body: { currency: 'NGN' },
  query: {},
  params: {},
  level: 'error',
  timestamp: '2025-08-10T10:57:21.093Z'
}
{
  service: 'communication-api',
  message: 'Error occurred: Wallet already exists for this user',
  stack: 'Error: Wallet already exists for this user\n' +
    '    at WalletService.createWallet (/usr/src/app/src/services/walletService.ts:21:13)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at WalletController.createWallet (/usr/src/app/src/controllers/walletController.ts:18:20)',
  statusCode: 409,
  url: '/api/wallet',
  method: 'POST',
  ip: '172.21.0.1',
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
  body: { currency: 'USD' },
  query: {},
  params: {},
  level: 'error',
  timestamp: '2025-08-10T10:58:43.876Z'
}
{
  service: 'communication-api',
  message: 'Error occurred: update "wallets" set "balance" = $1, "updated_at" = $2 where "wallet_id" = $3 - invalid input syntax for type numeric: "76004.00100.5"',
  stack: 'error: update "wallets" set "balance" = $1, "updated_at" = $2 where "wallet_id" = $3 - invalid input syntax for type numeric: "76004.00100.5"\n' +
    '    at Parser.parseErrorMessage (/usr/src/app/node_modules/pg-protocol/src/parser.ts:369:69)\n' +
    '    at Parser.handlePacket (/usr/src/app/node_modules/pg-protocol/src/parser.ts:187:21)\n' +
    '    at Parser.parse (/usr/src/app/node_modules/pg-protocol/src/parser.ts:102:30)\n' +
    '    at Socket.<anonymous> (/usr/src/app/node_modules/pg-protocol/src/index.ts:7:48)\n' +
    '    at Socket.emit (node:events:517:28)\n' +
    '    at addChunk (node:internal/streams/readable:368:12)\n' +
    '    at readableAddChunk (node:internal/streams/readable:341:9)\n' +
    '    at Socket.Readable.push (node:internal/streams/readable:278:10)\n' +
    '    at TCP.onStreamRead (node:internal/stream_base_commons:190:23)',
  statusCode: 500,
  url: '/api/wallet/transfer',
  method: 'POST',
  ip: '172.21.0.1',
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
  body: {
    toUserId: 'ae3dc41b-5c23-43fa-b017-2569c429bc99',
    amount: 100.5,
    description: 'Payment for services'
  },
  query: {},
  params: {},
  level: 'error',
  timestamp: '2025-08-10T11:00:30.736Z'
}
